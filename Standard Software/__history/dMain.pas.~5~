unit dMain;

interface

uses
  SysUtils, Classes, IniFiles, DB, ADODB, Dialogs, ImgList, Controls, RpCon,
  RpConDS, RpRender, RpRenderPDF, RpRave, RpDefine, RpBase, RpSystem, RpFiler,
  RpRenderHTML, ShowVersion, Provider, DBClient, IDSRegistry, RvLDCompiler,
  IDSLogToFile, MidasLib, RpRenderCanvas, RpRenderPrinter;

type
  TdmMain = class(TDataModule)
    dbConn: TADOConnection;
    ImageList: TImageList;
    RvSystem1: TRvSystem;
    RvProject1: TRvProject;
    RvRenderPDF1: TRvRenderPDF;
    RvNDRWriter1: TRvNDRWriter;
    RvRenderHTML1: TRvRenderHTML;
    idsVer: TIDSShowVersion;
    IDSShowVersion1: TIDSShowVersion;
    idsReg: TIDSRegistry;
    idsLogFile: TIDSLogToFile;
    RvRenderPrinter1: TRvRenderPrinter;
    dspConn: TDataSetProvider;
    qryConn: TADOQuery;
    cdsGeneral: TClientDataSet;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    fDebug: Boolean;
    fToFile: Boolean;
    fWeekly: Boolean;
    fClientName:string;
    fReportName: string;
    fRptInvName: String;
    fRptStateName: String;
    fSMTPFromAddress: string;
    fSMTPFromName: string;
    fSMTPHost: string;
    fSMTPUserName: string;
    procedure GetData(cds: TClientDataSet; SQL: string);
    procedure GetGeneralData(SQL: string);
    function GetDataString(SQL: String): String;
    function GetDataInteger(SQL: String): Integer;
    procedure ExecuteSQL(SQL: string);

    function nifb(AStr: string): string;
    function nif(AStr, NStr: string): string;
    function zifb(AStr: string): string;
    function ifb(AStr, DefStr: string): string;

    function PrintRpt(PDFPath, RptName: string; SeqNo: Integer; FPV: string): string;
    procedure LogMessage(S: string);
  end;

var
  dmMain: TdmMain;

implementation

uses Encrypt;
{$R *.dfm}

procedure TdmMain.DataModuleCreate(Sender: TObject);
var
  Inifile :TIniFile;
  ConnectionNo, PPos : integer;
  ConStr, WeekStr, KeyStr, AStr, Pwd: String;
begin
  if dbConn.Connected then
  begin
    MessageDlg('Close Connection before Distribution',mtInformation,[mbOK],0);
  end;

  dbConn.Close;
  ConStr := 'Acclaim';
  ConnectionNo := 1;
  fDebug := False;
  fToFile := False;
  if ParamCount >= 1 then
  begin
    if (UpperCase(ParamStr(1)) = 'DEBUG') then
      fDebug := True
    else            // Alternative Connection
      ConnectionNo := StrToInt(ParamStr(1));
    if (ParamCount >= 2) and (UpperCase(ParamStr(2)) = 'FILE') then
    begin
      fToFile := True;
      idsLogFile.FileName := 'EmailInvoice.log';
    end;
  end;
  try
    dbConn.Close;
    if (not FileExists(GetCurrentDir+'\AcclaimConnection.ini')) then
      MessageDlg('AcclaimConnection.ini not found',mtInformation,[mbOK],0);
    IniFile:=TIniFile.Create(GetCurrentDir+'\AcclaimConnection.ini');
    LogMessage('DMain create - Get Connection String');
    if ConnectionNo > 1 then
      ConStr := ConStr + IntToStr(ConnectionNo);
    AStr := IniFile.ReadString('Connections',ConStr,'');
    LogMessage('Constr ['+Astr+']');
    KeyStr:='Password';
    Pwd := IniFile.ReadString('Connections',KeyStr,'');
    if Pwd <> '' then
    begin
      //Pwd := EncryptString(Pwd,KeyStr);
      Pwd := DecryptString(Pwd,KeyStr);
      if pos('[Password]',AStr) > 0 then
      begin
        PPos := pos('['+KeyStr+']',AStr);
        AStr := Copy(AStr,1,PPos-1)+Pwd+Copy(AStr,PPos+10,length(AStr)-PPos-9);
      end;
    end;
    dbConn.ConnectionString := AStr;        // Incase we don't use the password

    WeekStr := UpperCase(IniFile.ReadString('Settings','Weekly','False'));
    fWeekly := (WeekStr='TRUE');
    fClientName:=IniFile.ReadString('Settings','ClientName','');
    fReportName:=IniFile.ReadString('Settings','ReportName','');
    fRptInvName:=IniFile.ReadString('Settings','InvoiceReport','rptInvoice');
    fRptStateName:=IniFile.ReadString('Settings','StatementReport','rptStatement');
    fSMTPHost:=IniFile.ReadString('SMTP','Host','');
    fSMTPUserName:=IniFile.ReadString('SMTP','UserName','');
    fSMTPfromName:=IniFile.ReadString('SMTP','FromName','');
    fSMTPfromAddress:=IniFile.ReadString('SMTP','FromAddress','');
    if dbConn.Connected then
    begin
      MessageDlg('Close Connection before Distribution',mtInformation,[mbOK],0);
      //Halt;
    end;
    try
      dbConn.Connected := True;
    except
      MessageDlg('Cannot connect to Database'+#13+dbConn.ConnectionString,mtError,[mbOK],0);
      Halt;
    end;
  except
    MessageDlg('Error connecting to Database'+#13+dbConn.ConnectionString,mtError,[mbOK],0);
    Halt;
  end;
  if Trim(fReportName) <> '' then
  begin
    RvProject1.ProjectFile := ExtractFilePath(ParamStr(0))+fReportName;
    RvProject1.Open;
  end;
end;

//===============================================================================
procedure TdmMain.GetData(cds: TClientDataSet; SQL: String);
begin
  cds.Close;
  if cds.ProviderName = '' then
    cds.ProviderName := 'dspConn';
  qryConn.SQL.Text := SQL;
  cds.Open;
end;

procedure TdmMain.GetGeneralData(SQL: string);
begin
  GetData(cdsGeneral, SQL);
end;

function TdmMain.GetDataString(SQL: String): string;
begin
  qryConn.Close;
  qryConn.SQL.Text := SQL;
  qryConn.Open;
  Result := qryConn.Fields[0].AsString;
end;

function TdmMain.GetDataInteger(SQL: String): integer;
begin
  qryConn.Close;
  qryConn.SQL.Text := SQL;
  qryConn.Open;
  Result := qryConn.Fields[0].AsInteger;
end;

procedure  TdmMain.ExecuteSQL(SQL: string);
begin
  qryConn.Close;
  qryConn.SQL.Text := SQL;
  qryConn.ExecSQL;
end;

function TdmMain.ifb(AStr, DefStr: string): string;
var
  BStr: string;
begin
  BStr := Trim(AStr);
  if BStr = '' then
    Result := DefStr
  else
    Result := BStr;
end;

function TdmMain.nifb(AStr: string): string;
begin
  Result := ifb(AStr,'null');
end;

function TdmMain.nif(AStr, NStr: string): string;
begin
  if AStr = NStr then
    Result := 'null'
  else
    Result := AStr;
end;

function TdmMain.zifb(AStr: string): string;
begin
  Result := ifb(AStr,'0');
end;



function TdmMain.PrintRpt(PDFPath, RptName: string; SeqNo: Integer; FPV: string): string;
var
  i: integer;
begin
  //qryGeneralInfo.Open;
  RvProject1.Open;
  RvProject1.SelectReport(RptName,False);
  if FPV = 'F' then
  begin
    RvSystem1.DefaultDest := rdFile;
    RvSystem1.ReportDest := rdFile;
    RvSystem1.DoNativeOutput := false;
    RvSystem1.RenderObject := RvRenderPDF1;
    RvSystem1.OutputFileName := PDFPath+'Rpt_'+IntToStr(SeqNo)+'.pdf';
   end
  else if FPV = 'P' then
  begin
    RvSystem1.RenderObject := RvRenderPrinter1;
    RvSystem1.DefaultDest := rdPrinter;
    RvSystem1.ReportDest := rdPrinter;
    RvSystem1.DoNativeOutput := True;
    RvSystem1.OutputFileName := '';
    RvSystem1.RenderObject := nil;
  end
  else if FPV = 'V' then
  begin
    RvSystem1.DefaultDest := rdPreview;
    RvSystem1.ReportDest := rdPreview;
  end;
  RvSystem1.SystemSetups := dmMain.RvSystem1.SystemSetups - [ssAllowSetup];

  RvProject1.Execute;
  Result := RvSystem1.OutputFileName;
end;

procedure TdmMain.LogMessage(S: string);
begin
  if fDebug then
  begin
    if fToFile then
      idsLogFile.write(S)
    else
      ShowMessage(S);
  end;
end;

end.
